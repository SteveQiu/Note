#!/bin/sh

# git config core.hooksPath $(pwd)
# git config --unset core.hooksPath

prependBranchType=""
prependJiraId=""

COMMIT_MSG_FILENAME=$1
COMMIT_SOURCE=$2
MESSAGE=$(cat "$COMMIT_MSG_FILENAME")
SHA1=$3
branchName=$(git rev-parse --abbrev-ref HEAD)
branchType=$(echo "$MESSAGE"| sed -nr "s/^([A-Za-z]+)[\/:].+/\1/p")
jiraId=$(echo "$MESSAGE" | sed -nr "s/([^A-Z]+)([A-Za-z]+-[0-9]+).+/\2/p")
echo "$branchType"
# echo "$jiraId"
# echo "$MESSAGE"
# echo $(echo "$MESSAGE"| sed -nr "s/^([A-Za-z]+)[\/:].+/\1/p")

if [ -z "$branchType" ]; then
    # if branch type is not found in message, search branch name
    branchType=$(echo "$branchName" | sed -nr "s/^([A-Za-z]+)[\/:].+/\1/p")
    # format to use alias [build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test]

    # echo $branchType

    if [ -z "$branchType" ]; then
        echo "Type not found default to Feat \n"
        branchType=feat
    fi

fi

case $branchType in
    feature)
        branchType=feat
        ;;
    bugfix)
        branchType=fix
        ;;
    doc)
        branchType=docs
        ;;
    *)
        ;;
esac

prependBranchType="$branchType: "

if [ -z "$jiraId" ]; then
    # if branch type is not found in message, search branch name
    jiraId=$(echo "$branchName" | sed -nr "s/(^[A-Za-z]+[\/:])?([A-Z]+-[0-9]+)-.+/\2/p")

    if [ -z "$jiraId" ]; then
        echo "warning Jira ID not found"
    fi

fi
prependJiraId="[$jiraId] "

echo "$prependBranchType$prependJiraId$MESSAGE" > "$COMMIT_MSG_FILENAME"
